/*
 * Copyright (c) 2008-2013, Matthias Mann
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Matthias Mann nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package nginx.clojure;

import java.io.IOException;
import java.util.Iterator;
import junit.framework.TestCase;
import org.junit.Test;

/**
 * Test to checking suspendable method calls as constructor parameters
 * 
 * @author Matthias Mann
 */
public class SuspendConstructorArgumentTest extends TestCase {

    @Test
    public void testCalls() throws IOException {
        @SuppressWarnings("serial")
		Iterator<String> iter = new CoIterator<String>() {
            @Override
            public void run() throws SuspendExecution {
                m1();
                m2();
                m3();
                m4();
            }
            
            private void m1() throws SuspendExecution {
                // this is the pattern generated by Eclipse's compiler for: str() + " Bla"
                produce(new StringBuilder(str()).append(" Bla").toString());
            }
            
            private void m2() throws SuspendExecution {
                produce(new String(buf(), offset(), len()));
            }
            
            private void m3() throws SuspendExecution {
                produce(new Long(l()).toString());
            }
            
            private void m4() throws SuspendExecution {
                produce(new StringBuilder(new String(buf(), offset(), len())).append(str()).toString());
            }
            
            private String str() throws SuspendExecution {
                produce("str()");
                return "Test";
            }

            private char[] buf() throws SuspendExecution {
                produce("buf()");
                return "Hugo".toCharArray();
            }
            
            private int offset() throws SuspendExecution {
                produce("offset()");
                return 1;
            }
            
            private int len() throws SuspendExecution {
                produce("len()");
                return 3;
            }
            
            private long l() throws SuspendExecution {
                produce("l()");
                return 4711L << 32;
            }
        };
        
        assertEquals("str()", iter.next());
        assertEquals("Test Bla", iter.next());
        assertEquals("buf()", iter.next());
        assertEquals("offset()", iter.next());
        assertEquals("len()", iter.next());
        assertEquals("ugo", iter.next());
        assertEquals("l()", iter.next());
        assertEquals(Long.toString(4711L << 32), iter.next());
        assertEquals("buf()", iter.next());
        assertEquals("offset()", iter.next());
        assertEquals("len()", iter.next());
        assertEquals("str()", iter.next());
        assertEquals("ugoTest", iter.next());
        assertFalse(iter.hasNext());
    }
}
