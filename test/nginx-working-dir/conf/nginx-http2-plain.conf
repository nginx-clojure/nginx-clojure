###This configuration not enable coroutine or thread pool.

###you can uncomment next two lines for easy debug
daemon  off;
###Warning: if master_process is off, there will be only one nginx worker running. Only use it for debug propose.
master_process  off;

#user  nobody;
###you can set worker_processes =1 for easy debug
###if master_process is off, the count of worker processes will be 1 regardless of worker_processes settings
worker_processes  1;


#error_log   logs/error.log;
error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    #debug_connection 127.0.0.1;
    multi_accept on;
}



http {


    include       mime.types;
    default_type  text/html;
    
    #max_balanced_tcp_connections 1024;

    sendfile  on;
    tcp_nopush  on;
    tcp_nodelay on;
    #keepalive_timeout   65;
    # keepalive_requests  100000;
    server_tokens off;
    reset_timedout_connection on;

    #gzip  on;


    jvm_path auto;
    
    
    jvm_var ncdev '/home/who/git/nginx-clojure';
    jvm_var mrr '/home/who/.m2/repository';
    jvm_var ncjar '#{ncdev}/target/*';

    
    ###run tool mode , 't' means Tool
    #jvm_options "-javaagent:#{ncjar}=tmb";
    ###Setting Output Path of Waving Configuration File, default is $nginx-workdir/nginx.clojure.wave.CfgToolOutFile
    #jvm_options "-Dnginx.clojure.wave.CfgToolOutFile=/tmp/my-wave-cfg.txt";
    
    ###coroutine enabled mode
    #jvm_options "-javaagent:#{ncjar}=mb";
    ###for win32, class path seperator is ";"
    #jvm_options "-Xbootclasspath/a:#{ncjar}:#{mrr}/org/clojure/clojure/1.5.1/clojure-1.5.1.jar";
   
   
    ###wave log level, default is error
    #jvm_options "-Dnginx.clojure.logger.wave.level=info";
    
    jvm_options "-Dnginx.clojure.logger.socket.level=error";
    
    ###nginx clojure log level, default is info
    jvm_options "-Dnginx.clojure.logger.level=debug";

    #jvm_options "-Dnginx.clojure.wave.trace.classmethodpattern=sun.reflect.*|nginx.*|org.org.codehaus.groovy.*|java.lang.reflect.*|groovy.*";
    #jvm_options "-Dnginx.clojure.wave.trace.classpattern=com.mysql.jdbc.StatementImpl";

    #jvm_classpath_check off;
    
    ###including ring-core & compojure & clj-http & clj-jdbc & mysql-connector-java for test
    jvm_classpath "#{ncdev}/bin:#{ncjar}:coroutine-udfs:#{ncdev}/bin:#{ncdev}/test/clojure:#{ncdev}/src/clojure:#{ncdev}/test/groovy:#{mrr}/clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar:#{mrr}/clj-http/clj-http/0.7.8/clj-http-0.7.8.jar:#{mrr}/org/clojure/tools.macro/0.1.0/tools.macro-0.1.0.jar:#{mrr}/org/codehaus/groovy/groovy/2.3.4/groovy-2.3.4.jar:#{mrr}/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar:#{mrr}/tigris/tigris/0.1.1/tigris-0.1.1.jar:#{mrr}/ring/ring-codec/1.0.0/ring-codec-1.0.0.jar:#{mrr}/org/jsoup/jsoup/1.7.1/jsoup-1.7.1.jar:#{mrr}/org/clojure/java.jdbc/0.3.3/java.jdbc-0.3.3.jar:#{mrr}/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:#{mrr}/cheshire/cheshire/5.2.0/cheshire-5.2.0.jar:#{mrr}/clj-time/clj-time/0.4.4/clj-time-0.4.4.jar:#{mrr}/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar:#{mrr}/com/fasterxml/jackson/dataformat/jackson-dataformat-smile/2.2.1/jackson-dataformat-smile-2.2.1.jar:#{mrr}/junit/junit/4.11/junit-4.11.jar:#{mrr}/com/fasterxml/jackson/core/jackson-core/2.2.1/jackson-core-2.2.1.jar:#{mrr}/commons-io/commons-io/2.4/commons-io-2.4.jar:#{mrr}/commons-codec/commons-codec/1.8/commons-codec-1.8.jar:#{mrr}/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar:#{mrr}/commons-fileupload/commons-fileupload/1.3/commons-fileupload-1.3.jar:#{mrr}/org/clojure/tools.reader/0.7.3/tools.reader-0.7.3.jar:#{mrr}/org/apache/httpcomponents/httpcore/4.3/httpcore-4.3.jar:#{mrr}/org/clojure/tools.nrepl/0.2.3/tools.nrepl-0.2.3.jar:#{mrr}/org/apache/httpcomponents/httpclient/4.3.1/httpclient-4.3.1.jar:#{mrr}/joda-time/joda-time/2.1/joda-time-2.1.jar:#{mrr}/crouton/crouton/0.1.1/crouton-0.1.1.jar:#{mrr}/clout/clout/1.1.0/clout-1.1.0.jar:#{mrr}/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar:#{mrr}/slingshot/slingshot/0.10.3/slingshot-0.10.3.jar:#{mrr}/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:#{mrr}/compojure/compojure/1.1.6/compojure-1.1.6.jar:#{mrr}/org/apache/httpcomponents/httpmime/4.3.1/httpmime-4.3.1.jar:#{mrr}/ring/ring-core/1.2.1/ring-core-1.2.1.jar:#{mrr}/org/clojure/core.incubator/0.1.0/core.incubator-0.1.0.jar:#{mrr}/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar";
    
    
    ###setting user defined class waving configuration files which are in the above boot classpath
    #jvm_options "-Dnginx.clojure.wave.udfs=compojure-http-clj.txt,mysql-jdbc.txt,test-groovy.txt";
    
    jvm_options "-Dfile.encoding=UTF-8";
    
    ###for enable java remote debug uncomment next two lines, make sure "master_process = off"
    jvm_options "-Xdebug";
    jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=840#{pno},suspend=n";
    
    #for outofmemory dump
    #jvm_options "-XX:+HeapDumpOnOutOfMemoryError";
    
    #jvm_options "-Xverify:none";
    #jvm_options "-XX:+UseSerialGC";
    # jvm_options "-XX:MaxGCPauseMillis=25";
    #jvm_options "-XX:+UseG1GC";
    
    #jvm_options "-Xms1024m";
    #jvm_options "-Xmx1024m";
    
    shared_map PubSubTopic tinymap?space=1m&entries=256;
    
    shared_map testTinyMap tinymap?space=1m&entries=8096;
    
    shared_map testHashMap hashmap?space=2m&entries=8096;

    #If jvm_workers > 0 and coroutine disabled, it is threads number (per nginx worker) for request handler thread pool on jvm. 
    #jvm_workers 16;
    
    jvm_handler_type 'clojure';
    
    jvm_init_handler_code '
    (do
	    (use \'nginx.clojure.core)
	    (without-coroutine
	      (fn[ctx]
	        (.println System/err "init2 on http clojure context")
	        {:status 200}
	        )
	    ))
    ';
    
    jvm_exit_handler_code '
     (do
	    (use \'nginx.clojure.core)
	    (without-coroutine
	      (fn[ctx]
	        (.println System/err "exit on http clojure context")
	        {:status 200}
	        )
	    ))   
    ';
    
    
    server {
	    listen 8443 ssl http2;
	    
			ssl_certificate nginx-selfsigned.crt;
			ssl_certificate_key nginx-selfsigned.key;
	
			ssl_protocols TLSv1.2;
			ssl_prefer_server_ciphers on;
			ssl_dhparam dhparam.pem;
			
			ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
			
			ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
			ssl_session_timeout  10m;
			ssl_session_cache shared:SSL:10m;
			ssl_session_tickets off; # Requires nginx >= 1.5.9
			ssl_stapling on; # Requires nginx >= 1.3.7
			ssl_stapling_verify on; # Requires nginx => 1.3.7
			resolver 8.8.8.8 8.8.4.4 valid=300s;
			resolver_timeout 5s;
			# Disable strict transport security for now. You can uncomment the following
			# line if you understand the implications.
			# add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
			add_header X-Frame-Options DENY;
			add_header X-Content-Type-Options nosniff;
			add_header X-XSS-Protection "1; mode=block";
	
	    server_name dev.nginx-clojure.org;
	    root /home/who/git/nginx-clojure/test/nginx-working-dir/testfiles;
	    index index.html index.htm index.nginx-debian.html;
	    
        location /clojure {
          content_handler_type 'clojure';
          content_handler_code ' 
				(fn[req]
						  (println (get-ngx-var req "request_uri"))
						  (println "discard request body:" (discard-request-body! req))
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  "Hello Clojure & Nginx!" 
				})
          ';
       }
       
       location = /wcp.html {
          http2_push /1.css;
          http2_push /large.txt;
       }
       
       location /serverpush {
       		content_handler_type java;
       		content_handler_name 'nginx.clojure.java.Http2Handlers$HijackSendHandler';
       }
       
       location /serverpush2 {
       		content_handler_type clojure;
       		content_handler_code '
       		  (fn[req]
       		    (let [ch (hijack! req true)]
       		      (send-response! ch {:status 200, :body "part1" });
       		      ;(nginx.clojure.NginxClojureRT/ngx_http_clojure_mem_inc_req_count (.nativeRequest req), 1)
       		      ;(send-response! ch {:status 200, :body "part2" });
       		    )
       		  )
       		';
       }
       
      location /javaloghandler {
      	handler_type java;
      	content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
      	location /javaloghandler/simpleloghandler {
      	  log_handler_name 'nginx.clojure.java.LogHandlerTestSet4NginxJavaRingHandler$SimpleLogHandler';
      	}
      } 
	    
    }


}
