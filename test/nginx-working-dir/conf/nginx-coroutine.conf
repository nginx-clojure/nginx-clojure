
###you can uncomment next two lines for easy debug
daemon  off;
###Warning: if master_process is off, there will be only one nginx worker running. Only use it for debug propose.
master_process  off;

#user  nobody;
###you can set worker_processes =1 for easy debug
###if master_process is off, the count of worker processes will be 1 regardless of worker_processes settings
worker_processes  2;


error_log   logs/error.log;
#error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    #debug_connection 127.0.0.1;
    multi_accept on;
}


http {

    include       mime.types;
    default_type  application/octet-stream;


    sendfile  on;
    tcp_nopush  on;
    tcp_nodelay on;
    #keepalive_timeout   65;
    # keepalive_requests  100000;
    server_tokens off;
    reset_timedout_connection on;
    send_timeout 5;


    #gzip  on;


    jvm_path auto;
    
    
    jvm_var ncdev '/home/who/git/nginx-clojure';
    jvm_var mrr '/home/who/.m2/repository';
    jvm_var ncjar '#{ncdev}/target/nginx-clojure-0.5.3.jar';

    
    ###run tool mode , 't' means Tool
    #jvm_options "-javaagent:#{ncjar}=tmb";
    ###Setting Output Path of Waving Configuration File, default is $nginx-workdir/nginx.clojure.wave.CfgToolOutFile
    #jvm_options "-Dnginx.clojure.wave.CfgToolOutFile=/tmp/my-wave-cfg.txt";
    
    ###coroutine enabled mode
    jvm_options "-javaagent:#{ncjar}=mb";
    ###for win32, class path seperator is ";"
    jvm_options "-Xbootclasspath/a:#{ncjar}:#{mrr}/org/clojure/clojure/1.9.0/clojure-1.9.0.jar:#{mrr}/org/clojure/spec.alpha/0.1.143/spec.alpha-0.1.143.jar";
   
   
    ###wave log level, default is error
    #jvm_options "-Dnginx.clojure.logger.wave.level=info";
    
    jvm_options "-Dnginx.clojure.logger.socket.level=error";
    
    ###nginx clojure log level, default is info
    jvm_options "-Dnginx.clojure.logger.level=debug";

    #jvm_options "-Dnginx.clojure.wave.trace.classmethodpattern=sun.reflect.*|nginx.*|org.org.codehaus.groovy.*|java.lang.reflect.*|groovy.*";
    #jvm_options "-Dnginx.clojure.wave.trace.classpattern=com.mysql.jdbc.StatementImpl";

    jvm_classpath_check off;

    ###including ring-core & compojure & clj-http & clj-jdbc & mysql-connector-java for test
    jvm_classpath "#{ncdev}/test/nginx-working-dir/coroutine-udfs:#{ncdev}/bin:#{ncjar}:#{ncdev}/target/testclasses:#{ncdev}/test/resources:#{ncdev}/test/clojure:#{ncdev}/src/clojure:#{ncdev}/test/groovy:#{mrr}/clout/clout/1.1.0/clout-1.1.0.jar:#{mrr}/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:#{mrr}/nrepl/nrepl/0.6.0/nrepl-0.6.0.jar:#{mrr}/redis/clients/jedis/3.1.0/jedis-3.1.0.jar:#{mrr}/clojure-complete/clojure-complete/0.2.5/clojure-complete-0.2.5.jar:#{mrr}/org/clojure/tools.macro/0.1.0/tools.macro-0.1.0.jar:#{mrr}/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar:#{mrr}/org/apache/httpcomponents/httpclient/4.3.1/httpclient-4.3.1.jar:#{mrr}/commons-io/commons-io/2.6/commons-io-2.6.jar:#{mrr}/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar:#{mrr}/com/fasterxml/jackson/dataformat/jackson-dataformat-smile/2.2.1/jackson-dataformat-smile-2.2.1.jar:#{mrr}/crypto-equality/crypto-equality/1.0.0/crypto-equality-1.0.0.jar:#{mrr}/org/clojure/java.jdbc/0.3.3/java.jdbc-0.3.3.jar:#{mrr}/junit/junit/4.11/junit-4.11.jar:#{mrr}/stylefruits/gniazdo/1.1.2/gniazdo-1.1.2.jar:#{mrr}/slingshot/slingshot/0.10.3/slingshot-0.10.3.jar:#{mrr}/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:#{mrr}/commons-fileupload/commons-fileupload/1.3.3/commons-fileupload-1.3.3.jar:#{mrr}/org/clojure/core.incubator/0.1.0/core.incubator-0.1.0.jar:#{mrr}/org/apache/httpcomponents/httpcore/4.3/httpcore-4.3.jar:#{mrr}/org/eclipse/jetty/websocket/websocket-common/9.4.19.v20190610/websocket-common-9.4.19.v20190610.jar:#{mrr}/org/jsoup/jsoup/1.7.1/jsoup-1.7.1.jar:#{mrr}/org/codehaus/groovy/groovy/2.5.8/groovy-2.5.8.jar:#{mrr}/org/apache/httpcomponents/httpmime/4.3.1/httpmime-4.3.1.jar:#{mrr}/tigris/tigris/0.1.1/tigris-0.1.1.jar:#{mrr}/org/eclipse/jetty/websocket/websocket-client/9.4.19.v20190610/websocket-client-9.4.19.v20190610.jar:#{mrr}/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar:#{mrr}/org/eclipse/jetty/jetty-http/9.4.19.v20190610/jetty-http-9.4.19.v20190610.jar:#{mrr}/commons-codec/commons-codec/1.8/commons-codec-1.8.jar:#{mrr}/com/fasterxml/jackson/core/jackson-core/2.2.1/jackson-core-2.2.1.jar:#{mrr}/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:#{mrr}/org/eclipse/jetty/jetty-util/9.4.19.v20190610/jetty-util-9.4.19.v20190610.jar:#{mrr}/org/eclipse/jetty/jetty-io/9.4.19.v20190610/jetty-io-9.4.19.v20190610.jar:#{mrr}/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar:#{mrr}/org/clojure/core.specs.alpha/0.1.24/core.specs.alpha-0.1.24.jar:#{mrr}/org/clojure/data.json/0.2.5/data.json-0.2.5.jar:#{mrr}/org/clojure/tools.reader/0.8.1/tools.reader-0.8.1.jar:#{mrr}/org/clojure/tools.trace/0.7.10/tools.trace-0.7.10.jar:#{mrr}/org/eclipse/jetty/websocket/websocket-api/9.4.19.v20190610/websocket-api-9.4.19.v20190610.jar:#{mrr}/clj-time/clj-time/0.14.3/clj-time-0.14.3.jar:#{mrr}/org/clojure/clojure/1.9.0/clojure-1.9.0.jar:#{mrr}/clj-http/clj-http/0.7.8/clj-http-0.7.8.jar:#{mrr}/org/eclipse/jetty/jetty-xml/9.4.19.v20190610/jetty-xml-9.4.19.v20190610.jar:#{mrr}/org/eclipse/jetty/jetty-client/9.4.19.v20190610/jetty-client-9.4.19.v20190610.jar:#{mrr}/ring/ring-codec/1.1.1/ring-codec-1.1.1.jar:#{mrr}/compojure/compojure/1.1.6/compojure-1.1.6.jar:#{mrr}/org/clojure/spec.alpha/0.1.143/spec.alpha-0.1.143.jar:#{mrr}/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar:#{mrr}/cheshire/cheshire/5.2.0/cheshire-5.2.0.jar:#{mrr}/ring/ring-core/1.7.1/ring-core-1.7.1.jar:#{mrr}/crypto-random/crypto-random/1.2.0/crypto-random-1.2.0.jar:#{mrr}/joda-time/joda-time/2.9.9/joda-time-2.9.9.jar:#{mrr}/crouton/crouton/0.1.1/crouton-0.1.1.jar";        
    
    ###setting user defined class waving configuration files which are in the above boot classpath
    jvm_options "-Dnginx.clojure.wave.udfs=compojure-http-clj.txt,mysql-jdbc.txt,test-groovy.txt,https.txt,redis.txt,ssl.txt";
    
    ###for enable java remote debug uncomment next two lines, make sure "master_process = off"
    jvm_options "-Xdebug";
    jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=840#{pno},suspend=n";
    
    #for outofmemory dump
    #jvm_options "-XX:+HeapDumpOnOutOfMemoryError";
    
    #jvm_options "-Xverify:none";
    #jvm_options "-XX:+UseSerialGC";
    jvm_options "-XX:MaxGCPauseMillis=25";
    jvm_options "-XX:+UseG1GC";
    
    #jvm_options "-Xms1024m";
    #jvm_options "-Xmx1024m";
    
    shared_map PubSubTopic tinymap?space=1m&entries=256;
    
    shared_map testTinyMap tinymap?space=1m&entries=8096;
    
    shared_map testHashMap hashmap?space=2m&entries=8096;
    

    #If jvm_workers > 0 and coroutine disabled, it is threads number (per nginx worker) for request handler thread pool on jvm. 
    #jvm_workers 16;
    
    jvm_handler_type 'clojure';
    
    jvm_init_handler_code '
    (do
	    (use \'nginx.clojure.core)
	    (without-coroutine
	      (fn[ctx]
	        (.println System/err "init2 on http clojure context")
	        {:status 200}
	        )
	    ))
    ';
    
    jvm_exit_handler_code '
     (do
	    (use \'nginx.clojure.core)
	    (without-coroutine
	      (fn[ctx]
	        (.println System/err "exit on http clojure context")
	        {:status 200}
	        )
	    ))   
    ';
    
    upstream ua {
       server 127.0.0.1:8081;
    }
    
    upstream ub {
       server 127.0.0.1:8082;
    }
    
    server {
        listen       8081;
        server_name  localhost;
         location / {
         handler_type 'clojure';
         handler_code '(fn[req] 
                           ;(when (:body req)  (println (slurp (:body req))))
                           {:status 200 :headers {"content-type" "text/html"}
                                         :body (str "hello,a!" (:uri req))})';
         }
    }
    
    server {
        listen       8082;
        server_name  localhost;
         location / {
          handler_type 'clojure';
          handler_code '(fn[req] 
                             ; (when (:body req)  (println (slurp (:body req))))
                             {:status 200 :headers {"content-type" "text/html"}
                                         :body (str "hello,b!" (:uri req))})';
         }
    }
    
### A Simple SPDY test
#    server {
#        listen 9081 ssl spdy;
#        server_name  localhost;
#        ssl_certificate /home/who/Documents/server.crt;
#        ssl_certificate_key /home/who/Documents/server.key;
#        
#        location /spdytest {
#         handler_type 'clojure';
#         handler_code '
#           (do (use \'[nginx.clojure.core]) 
#						(fn[req]
#						  {
#						    :status 200,
#						    :headers {"content-type" "text/plain"},
#						    :body  (str "spdy ver:" (get-ngx-var req "spdy")) 
#						    }))
#         ';
#       
#       }
#    }
    
    handlers_lazy_init on;

    
    server {
        listen       8080;
        server_name  localhost;
       
       #uncomment this two lines for performance test 
        access_log off;
#	     error_log /dev/null crit;

        location / {
          handlers_lazy_init on;
          handler_type 'clojure';
          handler_code ' (let [text (slurp "testfiles/wcp.html")]
                                     (fn[req]
        						  									{:status 200 :headers {"content-type" "text/html"}
                                         :body text})
                                  )
        						
                  ';
         }

       location /clojure {
          handler_type 'clojure';
          handler_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  "Hello Clojure & Nginx!" 
						    })
          ';
       }
       
  location /nginx_status {
		stub_status on;
		access_log off;
	}
       
       location /java {
           content_handler_type 'java';
           content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler';
           content_handler_property file testfiles/wcp.html;
           send_timeout 10s;
       }
             
       location /groovy {
          content_handler_type 'groovy';
          content_handler_code '
               import nginx.clojure.java.NginxJavaRingHandler;
               import java.util.Map;
               public class HelloGroovy implements NginxJavaRingHandler {
                  public Object[] invoke(Map<String, Object> request){
                     return [200, ["Content-Type":"text/html"], "Hello, Groovy & Nginx!"];
                  }
               }
          ';
       }
       
       location /groovy2 {
          content_handler_type 'groovy';
          content_handler_name 'nginx.clojure.groovy.HelloGroovy2';
       }
       
       
       location /groovy-batchcall {
          handler_type 'groovy';
          handler_code '
               import nginx.clojure.java.NginxJavaRingHandler;
               import nginx.clojure.NginxClojureRT;
               import java.util.Map;
               public class HelloGroovy implements NginxJavaRingHandler {
                  public Object[] invoke(Map<String, Object> request){
                     def (r1, r2) = NginxClojureRT.coBatchCall( 
                       {"http://www.apache.org/dist/httpcomponents/httpclient/".toURL().text},
                       {"http://www.apache.org/dist/httpcomponents/httpcore/".toURL().text})
                     return [200, ["Content-Type":"text/html"], r1 + r2];
                  }
               }
          ';
       }


       location /vartest {
          set $myvar "Hello";
          handler_type 'clojure';
          handler_code '
           (do (use \'[nginx.clojure.core]) 
						(fn[req]
						  (set-ngx-var! req "myvar" 
						             (str (get-ngx-var req "myvar") "," "Xfeep!"))
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (get-ngx-var req "myvar") 
						    }))
          ';
       } 
       
       set $myvar "";
       set $myName "";
       
       location /rewritesimple {
          handler_type 'clojure';
          rewrite_handler_code '
           (do (use \'[nginx.clojure.core]) 
						(fn[req]
						  (set-ngx-var! req "myvar" "Hello")
						  phrase-done))
          ';
          handler_code '
           (do (use \'[nginx.clojure.core]) 
						(fn[req]
						  (set-ngx-var! req "myvar" 
						             (str (get-ngx-var req "myvar") "," "Xfeep!"))
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (get-ngx-var req "myvar") 
						    }))
          ';
       }    
       
       location /javarewritesimple {
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleRewriteHandler';
          handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }  
       
       location /javarewritebybodyproxy {
          always_read_body on;
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleRewriteByBodyHandler';
          proxy_pass http://$myup;
       }
       
       location /javarewrite/simplecfg {
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleConfigurableRewriteHandler';
          rewrite_handler_property myvar 'Hello';
          rewrite_handler_property myName 'Xfeep';
          content_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }
       
       location /javarewrite/ex {
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$ExceptionInRewriteHandler';
          content_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }
       
       location /javarewrite/hijackpass0 {
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleHijackedRewriteHandler';
          rewrite_handler_property ignoreFilter false;
          rewrite_handler_property continueToContentHandler true;
          content_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }
       
       location /javarewrite/hijackpass1 {
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleHijackedRewriteHandler';
          rewrite_handler_property ignoreFilter true;
          rewrite_handler_property continueToContentHandler true;
          content_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }
       
       location /javarewrite/hijackbad0 {
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleHijackedRewriteHandler';
          rewrite_handler_property ignoreFilter false;
          rewrite_handler_property continueToContentHandler false;
          content_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }
       
       location /javarewrite/hijackbad1 {
          handler_type 'java';
          rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleHijackedRewriteHandler';
          rewrite_handler_property ignoreFilter true;
          rewrite_handler_property continueToContentHandler false;
          content_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }
       
       location /javarewrite/remote {
         handler_type 'java';
         rewrite_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$FetchRemoteTextRewriteHandler';
         rewrite_handler_property continueToContentHandler true;
         content_handler_name 'nginx.clojure.java.RewriteHandlerTestSet4NginxJavaRingHandler$SimpleVarHandler';
       }
       
       set $myup "";
       set $mypath "";
       location /uptest {
          handler_type 'clojure';
          rewrite_handler_code '
           (do (use \'[nginx.clojure.core]) 
               (def my-atomic (atom 0))
						(fn[req]
						  (set-ngx-var! req "mypath" "mytestpath")
						  (if (= (rem (swap! my-atomic inc) 2) 0)
						   (set-ngx-var! req "myup" "ua")
						   (set-ngx-var! req "myup" "ub")
						   )
						  phrase-done))
          ';
          proxy_pass http://$myup/$mypath;
       }    
       
       location /authrewrite {
           handler_type 'clojure';
					 rewrite_handler_code '
					     (do (use \'[nginx.clojure.core]) 
					                (fn[req]
					                          (if (:query-string  req)
					                             ;AuthenticationHandler returns true so we go to proxy_pass
					                             phrase-done 
					                             ;else return 403
					                             {:status 403}
					                             )))
					          ';
					proxy_pass http://ua;
       }
       
       
       #including remote http request in rewrite handler       
       location /rewriteWithRemoteRequest {
          handler_type 'clojure';
          rewrite_handler_code '
           (do (use \'[nginx.clojure.core])
               (require \'[clj-http.client :as client]) 
						(fn[req]
						  (println "enter rewriteWithRemoteRequest")
						  (set-ngx-var! req "myvar" (:body (client/get "http://www.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES-4.3.x.txt")))
						  phrase-done))
          ';
          handler_code '
           (do (use \'[nginx.clojure.core]) 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (get-ngx-var req "myvar") 
						    }))
          ';
       }    
 
      location /authaccess {
           handler_type 'clojure';
					 access_handler_code '
					     (do (use \'[nginx.clojure.core]) 
					                (fn[req]
					                          (if (:query-string  req)
					                             ;AuthenticationHandler returns true so we go to proxy_pass
					                             phrase-done 
					                             ;else return 403
					                             {:status 403}
					                             )))
					          ';
					proxy_pass http://ua;
       }
       
       location /download {
         handler_type 'clojure';
          rewrite_handler_code '
           (do 
               (require \'[nginx.clojure.rewrite-handler-for-test :as rwt])
               rwt/speed-limiter)';         
         proxy_pass http://ua;
       }
       
       location /prheaders {
          handler_type 'clojure';
          handler_code ' 
						(fn[req]
						(let [headers (:headers req)]
						  (require \'clojure.string)
						  ;(doseq [[k m] headers]
						  ; (println k "=" m))
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body 
						   					 (print-str headers) 
						    }))
          ';
       }
       
       location /headers {
          handler_type 'clojure';
          handler_code ' 
						(fn[req]
						(let [headers (:headers req)]
						  (require \'clojure.string)
						  (println (str "req:" (print-str req)) )
						  (println "user-agent:" (headers "user-agent"))
						  (println "x-real-ip:" (headers "x-real-ip"))
						  (println "range:" (headers "range"))
						  (println "authorization:" (headers "authorization"))
						  {
						    :status 200,
						    :headers {"content-type" "text/plain", "my-header" (headers "my-header"), "etag" "e29b7ffb8a5325de60aed2d46a9d150b", "cache-control" ["no-store" "no-cache"]},
						    :body 
						   					 (pr-str 
						   					 {:user-agent (headers "user-agent")
						   					  :x-real-ip (headers "x-real-ip")
						   					  :all-headers (clojure.string/join (for [[k v] headers] (str k ":" v ",")))
						           	  :my-header (headers "my-header")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :cookie (headers "cookie")
						           	  :authorization (headers "authorization")
						           	  ;
						           	  ;"slow header seq: " (clojure.string/join (for [[k v] headers] (str k ":" v ","))) "\\n"
						           	  }
						            ) 
						    }))
          ';
       }
       
       location /loweruppercaseheaders {
          handler_type 'clojure';
          handler_code ' 
						(fn[req]
						(let [headers (:headers req)]
						  (require \'clojure.string)
						  {
						    :status 200,
						    :headers {"Content-Type" "text/plain", "my-header" (headers "My-header"), "Etag" "e29b7ffb8a5325de60aed2d46a9d150b", "Cache-Control" ["no-store" "no-cache"]},
						    :body 
						   					 (pr-str {:user-agent (headers "user-agent")
						           	  :my-header (headers "my-header")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :cookie (headers "cookie")
						           	  :all-headers (clojure.string/join (for [[k v] headers] (str k ":" v ",")))
						           	  }
						            ) 
						    }))
          ';
       }
       
       location /form {
          handler_type 'clojure';
          handler_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (let [headers (:headers req), req-body (:body req)]
						   					 (pr-str {:user-agent (headers "user-agent")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :form-body-type (if req-body (-> req-body .getClass .getName))
						           	  :form-body-str (if req-body (slurp req-body))}
						            ))
						    })
          ';
       }
       
       location /files {
       	 gzip on;
	       gzip_http_version 1.0;
	       gzip_disable "MSIE [1-6].";
	       gzip_types  text/plain;
         handler_type 'clojure';
         handler_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    (let [uri (:uri req), fpath (str "testfiles" (subs uri (-> "/files" count)))]
					      ;(println "from clojure:" (.getCanonicalPath (io/file fpath)))
					      {:status 200, :headers {};{"content-type"  "text/plain"}, 
					       :body (io/file fpath)}))
					  )
           ';
       }
       
       location /echoUploadfile {
         handler_type 'clojure';
         handler_code '
         (do 
					  (fn [req]
					      {:status 200, :body (slurp (:body req))})
					  )
           ';
       }
       
       location /echoUploadfileIgnoreRequestMethod {
         handler_type 'clojure';
         always_read_body on;
         handler_code '
         (do 
					  (fn [req]
					      {:status 200, :body (slurp (:body req))})
					  )
           ';
       }
       
       location /testMySeq{
       	 gzip on;
	       gzip_http_version 1.0;
	       gzip_disable "MSIE [1-6].";
	       gzip_types  text/plain;
         handler_type 'clojure';
         handler_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    {:status 200, :headers {"content-type"  "text/plain"}, :body (list "header line\n" (io/file "testfiles/small.html"))})
					 )
           ';
       }
       
       location /testInputStream {
       	 gzip on;
	       gzip_http_version 1.0;
	       gzip_disable "MSIE [1-6].";
	       gzip_types  text/plain;
         handler_type 'clojure';
         handler_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    ;do not use FileInputStream, please use File instead.
					    {:status 200, :headers {"content-type"  "text/plain"},:body (java.io.FileInputStream. "testfiles/small.html")})
					 )
           ';
       }
       
       location /testRedirect{
         handler_type 'clojure';
          handler_code ' 
						(fn[req]
						  {:status 302
                                            ;:test (println req)
						   :headers {"Location" "/files/small.html"}
						   :body ""})
          ';      
       }
       
       location /hello-ring {
         handler_type 'clojure';
         handler_name 'nginx.clojure.ring-handlers-for-test/hello-ring';
       }
       
       location /ringCompojure {
         handler_type 'clojure';
         handler_code '
           (do
             (use \'[compojure.core])
             (use \'[nginx.clojure.ring-handlers-for-test])
             (context "/ringCompojure" [] ring-compojure-test-handler)
           )
         ';
         location /ringCompojure/ws- {
           auto_upgrade_ws on;
         }
       }
       
       location /user-defined-method {
         handler_type 'clojure';
         always_read_body on;
         handler_code '
		       (fn [req]
		         {:status 200, :headers {"content-type" "text/plain"}, 
		          :body (str "method=" (:request-method req) "\n" "body=" (-> req :body slurp))}))
         ';
       }
       
       location /asyncsocket {
          handler_type 'java';
          handler_name 'nginx.clojure.net.SimpleHandler4TestNginxClojureAsynSocket';
       }
      
      location /cljasyncsocket {
        handler_type 'clojure';
        handler_name 'nginx.clojure.asyn-socket-handlers-for-test/async-socket-example-handler';
      }
      
      location /socket {
          handler_type 'java';
          handler_name 'nginx.clojure.net.SimpleHandler4TestNginxClojureSocket';
       }
       
              
       location /redis {
         content_handler_type java;
         content_handler_name nginx.clojure.net.RedisCoroutineTestSet4JavaHandler$SimpleRedisHandler;
       }
       
       
       location /coroutineSocketAndCompojure {
         handler_type 'clojure';
         handler_code '
           (do
             (use \'[compojure.core])
             (use \'[nginx.clojure.coroutine-socket-handlers-for-test])
             (context "/coroutineSocketAndCompojure" [] coroutine-socket-test-handler)
           )
         ';
       }
       
       location /javajdbc {
           content_handler_type java;
           content_handler_name nginx.clojure.net.MySQLJdbcConroutineTestSet4JavaHandler;
       }
       
       
       location /asyncchannel {
          handler_type 'java';
          handler_name 'nginx.clojure.net.SimpleHandler4TestNginxClojureAsynChannel';
       }
       
       location /cljasyncchannel {
          handler_type 'clojure';
          handler_name 'nginx.clojure.asyn-channel-handlers-for-test/async-channel-example-handler';
       }
       
       location /proxytest {
          proxy_pass http://192.168.2.12/ctest;
       }
       
       location ~ ^/simple.* {
         handler_type 'clojure';
         handler_code '
           (do
             (use \'[compojure.core])
             (use \'[nginx.clojure.coroutine-socket-handlers-for-test])
             coroutine-socket-test-handler
           )
         ';
       }
      

      location /httpclientget {
         handler_type 'java';
         handler_name 'nginx.clojure.net.SimpleHandler4TestHttpClientGetMethod';
       } 

      location /proxybufferonheaderfilter {
         header_filter_type java;
         header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$ProxyBufferOffHeaderFilter';
         proxy_http_version 1.1;
         proxy_buffering on;
         proxy_pass http://localhost:8080/java/mchain;
      } 

      location /proxybufferoffheaderfilter {
         header_filter_type java;
         header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$ProxyBufferOffHeaderFilter';
         proxy_http_version 1.1;
         proxy_buffering off;
         proxy_pass http://localhost:8080/java/mchain;
      }
      
      location /java/largebody {
          content_handler_code '
            (do
              (use \'[nginx.clojure.core])
              (fn[req] 
                {:status 200
                 :headers {}
                 :body (for [i (range 102400)] "123456789\n")})
            )';
       }
      
      location /proxybufferofflargebodyfilter {
         body_filter_type java;
         body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$WholeBodyValiator';
         proxy_http_version 1.1;
         proxy_buffering off;
         proxy_pass http://localhost:8080/java/largebody;
      } 
      
      location /proxybufferonlargebodyfilter {
         body_filter_type java;
         body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$WholeBodyValiator';
         proxy_http_version 1.1;
         proxy_buffering on;
         #proxy_buffers 2 1024;
         #proxy_busy_buffers_size 1024;
         #proxy_buffer_size 1024;
         proxy_pass http://localhost:8080/java/largebody;
      }            
       
      location /javafilter {
	          handler_type 'java';
	          header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$AddMoreHeaders';
	          alias "testfiles";
	          location /javafilter/hello {
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javafilter/hellocfg {
	            header_filter_property 'header-name' 'Xfeep-Header';
	            header_filter_property 'header-value' 'Hello!';
	            header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$ConfigurableAddMoreHeaders';
	            content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javafilter/ra {
	             header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$RemoveAndAddMoreHeaders';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          location /javafilter/ex0 {
	             header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$ExceptionInHeaderFilter';
	          }
	          
	         location /javafilter/ex1 {
	             header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$ExceptionInHeaderFilter';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javafilter/rc0 {
	             header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$AccessRemoteHeaderFilter';
	          }
	
	          location /javafilter/rc1 {
	             header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$AccessRemoteHeaderFilter';
	             alias "testfiles"; 
	          }          
	          
	          location /javafilter/rc2 {
	             header_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaHeaderFilter$AccessRemoteHeaderFilter';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }          
       }

       location /javabodyfilter {
            handlers_lazy_init off;
	          handler_type 'java';
	          body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$StreamFacedUppercaseBodyFilter';
	          alias "testfiles";
	          location /javabodyfilter/hello {
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javabodyfilter/mchain {
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$MultipleChainHandler';
	          }
	          
	          location /javabodyfilter/rmchain {
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$MultipleChainHandler';
	              body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$ReadOnlyBodyFilter';
	          }
	          
	          location /javabodyfilter/rmedium {
	             alias testfiles/medium.html;
	             body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$ReadOnlyBodyFilter';
	          }
	          
	          location /javabodyfilter/utf8mchain {
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Utf8MultipleChainHandler';
	          }
	          
	          location /javabodyfilter/hellosf {
	              body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$StringFacedUppercaseBodyFilter';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javabodyfilter/mchainsf {
	              body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$StringFacedUppercaseBodyFilter';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$MultipleChainHandler';
	          }
	          
	          location /javabodyfilter/utf8mchainsf {
	              body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$StringFacedUppercaseBodyFilter';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Utf8MultipleChainHandler';
	          }
	          
       }
       
      location /javaother {
        handlers_lazy_init off;
	      handler_type 'java';
	      
	      location /javaother/readbodybyevent {
	        always_read_body off;
	        content_handler_name nginx.clojure.java.MyBodyReadEventHandler;
	      }
      }       
       
      location /cljfilter {
	          handler_type 'clojure';
	          header_filter_name 'nginx.clojure.filter-handlers-for-test/add-more-headers';
	          alias "testfiles";
	          location /cljfilter/hello {
	              content_handler_type 'java';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          location /cljfilter/ra {
	             header_filter_type 'clojure';
	             header_filter_name 'nginx.clojure.filter-handlers-for-test/remove-and-add-more-headers';
	             content_handler_type 'java';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          location /cljfilter/ex0 {
	             header_filter_type 'clojure';
	             header_filter_name 'nginx.clojure.filter-handlers-for-test/exception-in-header-filter';
	          }
	          
	         location /cljfilter/ex1 {
	             header_filter_type 'clojure';
	             header_filter_name 'nginx.clojure.filter-handlers-for-test/exception-in-header-filter';
	             content_handler_type 'java';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /cljfilter/rc0 {
	             header_filter_type 'clojure';
	             header_filter_name 'nginx.clojure.filter-handlers-for-test/access-remote-header-filter';
	          }
	
	          location /cljfilter/rc1 {
	             header_filter_type 'clojure';
	             header_filter_name 'nginx.clojure.filter-handlers-for-test/access-remote-header-filter';
	             alias "testfiles"; 
	          }          
	          
	          location /cljfilter/rc2 {
	             header_filter_type 'clojure';
	             header_filter_name 'nginx.clojure.filter-handlers-for-test/access-remote-header-filter';
	             content_handler_type 'java';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }          
       }
 
        location /cljbodyfilter {
            handlers_lazy_init off;
	          handler_type 'clojure';
	          body_filter_name 'nginx.clojure.filter-handlers-for-test/uppercase-filter';
	          alias "testfiles";
	          location /cljbodyfilter/hello {
	              content_handler_type 'java';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /cljbodyfilter/mchain {
	              content_handler_type 'java';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$MultipleChainHandler';
	          }
	          
	          location /cljbodyfilter/utf8mchain {
	              content_handler_type 'java';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Utf8MultipleChainHandler';
	          }
	          
	          location /cljbodyfilter/hellosf {
	              body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$StringFacedUppercaseBodyFilter';
	              content_handler_type 'java';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /cljbodyfilter/mchainsf {
	              body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$StringFacedUppercaseBodyFilter';
	              content_handler_type 'java';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$MultipleChainHandler';
	          }
	          
	          location /cljbodyfilter/utf8mchainsf {
	              body_filter_name 'nginx.clojure.java.FilterTestSet4NginxJavaBodyFilter$StringFacedUppercaseBodyFilter';
	              content_handler_type 'java';
	              content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Utf8MultipleChainHandler';
	          }
	          
       }    
       
        location /javaaccess {
       	    handler_type 'java';
	          alias "testfiles";
	          location /javaaccess/deny {
	             access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$SimpleDeny';
	          }
	          
	          location /javaaccess/ex {
	             access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$ExceptionInAccessHandler';
	          }
	          
	          	          
	          location /javaaccess/basic0 {
	             access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$BasicAuthHandler';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javaaccess/basic1 {
	             access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$BasicAuthHandler';
	             alias "testfiles";
	          }	          
	          
	          location /javaaccess/rc {
	             access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$BasicAuthWithRemoteFetchHandler';
	             content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javaaccess/cfgbasic {
	            access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$ConfigurableBasicAuthHandler';
	            access_handler_property user 'xfeep';
	            access_handler_property password 'hello!';
	            content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javaaccess/hijack0 {
	            access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$HijackBasicAuthHandler';
	            access_handler_property ignoreFilter false;
	            content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
	          
	          location /javaaccess/hijack1 {
	            access_handler_name 'nginx.clojure.java.AccessHandlerTestSet4NginxJavaRingHandler$HijackBasicAuthHandler';
	            access_handler_property ignoreFilter true;
	            content_handler_name 'nginx.clojure.java.GeneralSet4TestNginxJavaRingHandler$Hello';
	          }
       }
       
      location /java-ws {
        handler_type 'java';
        location /java-ws/echo {
          auto_upgrade_ws on;
          content_handler_name 'nginx.clojure.java.WebSocketTestSet4NginxJavaRingHandler$WSEcho';
        }
        location /java-ws/nu-echo {
          content_handler_name 'nginx.clojure.java.WebSocketTestSet4NginxJavaRingHandler$NonAutoUpgradeWSEcho';
        }
        
        location /java-ws/wh-echo {
          content_handler_name 'nginx.clojure.java.WebSocketTestSet4NginxJavaRingHandler$WSWholeTextHandler';
        }
        location /java-ws/echo.xhtml {
          alias /home/who/git/tomcat80/webapps/examples/websocket/echo.xhtml;
        }
      }
      
      location /java-sharedmap {
        content_handler_type java;
        content_handler_name nginx.clojure.java.SharedMapTestSet4NginxJavaRingHandler;
      }
       
      location /dump {
         handler_type 'java';
         handler_name 'nginx.clojure.java.WaveConfigurationDumpHandler';       
      }
             
       #native nginx static file service for performance comparing
       location /ntestfile {
          alias "testfiles";
       }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }


    server {
        listen       8181;       
       #uncomment this two lines for performance test 
        access_log off;
#	     error_log /dev/null crit;
       location / {
           handler_type 'java';
           handler_name 'nginx.clojure.java.FileBytesHandler';
           content_handler_property file testfiles/wcp.html;
       }
        
    }
}