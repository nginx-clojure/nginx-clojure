###This configuration not enable coroutine or thread pool.

###you can uncomment next two lines for easy debug
daemon  off;
###Warning: if master_process is off, there will be only one nginx worker running. Only use it for debug propose.
master_process  off;

#user  nobody;
###you can set worker_processes =1 for easy debug
###if master_process is off, the count of worker processes will be 1 regardless of worker_processes settings
worker_processes  1;


#error_log   logs/error.log;
error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    #debug_connection 127.0.0.1;
    multi_accept on;
}



http {


    include       mime.types;
    default_type  text/html;
    
    #max_balanced_tcp_connections 1024;

    sendfile  on;
    tcp_nopush  on;
    tcp_nodelay on;
    #keepalive_timeout   65;
    # keepalive_requests  100000;
    server_tokens off;
    reset_timedout_connection on;

    #gzip  on;


    jvm_path auto;
    
    shared_map PubSubTopic tinymap?space=1m&entries=256;
    
    shared_map testTinyMap tinymap?space=1m&entries=8096;
    
    shared_map testHashMap hashmap?space=2m&entries=8096;

    #If jvm_workers > 0 and coroutine disabled, it is threads number (per nginx worker) for request handler thread pool on jvm. 
    #jvm_workers 16;
    
    jvm_handler_type 'clojure';
    
    jvm_init_handler_code '
    (do
	    (use \'nginx.clojure.core)
	    (without-coroutine
	      (fn[ctx]
	        (.println System/err "init2 on http clojure context")
	        {:status 200}
	        )
	    ))
    ';
    
    jvm_exit_handler_code '
     (do
	    (use \'nginx.clojure.core)
	    (without-coroutine
	      (fn[ctx]
	        (.println System/err "exit on http clojure context")
	        {:status 200}
	        )
	    ))   
    ';
    
    
    server {
	    listen 8443 ssl http2;
	    
			ssl_certificate nginx-selfsigned.crt;
			ssl_certificate_key nginx-selfsigned.key;
	
			ssl_protocols TLSv1.2;
			ssl_prefer_server_ciphers on;
			ssl_dhparam dhparam.pem;
			
			ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
			
			ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
			ssl_session_timeout  10m;
			ssl_session_cache shared:SSL:10m;
			ssl_session_tickets off; # Requires nginx >= 1.5.9
			ssl_stapling on; # Requires nginx >= 1.3.7
			ssl_stapling_verify on; # Requires nginx => 1.3.7
			resolver 8.8.8.8 8.8.4.4 valid=300s;
			resolver_timeout 5s;
			# Disable strict transport security for now. You can uncomment the following
			# line if you understand the implications.
			# add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
			add_header X-Frame-Options DENY;
			add_header X-Content-Type-Options nosniff;
			add_header X-XSS-Protection "1; mode=block";
	
	    server_name dev.nginx-clojure.org;
	    root /home/who/git/nginx-clojure/test/nginx-working-dir/testfiles;
	    index index.html index.htm index.nginx-debian.html;
	    
        location /clojure {
          content_handler_type 'clojure';
          content_handler_code ' 
				(fn[req]
						  (println (get-ngx-var req "request_uri"))
						  (println "discard request body:" (discard-request-body! req))
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  "Hello Clojure & Nginx!" 
				})
          ';
       }
       
       location = /wcp.html {
          http2_push /1.css;
       }
      
	    
    }


}
